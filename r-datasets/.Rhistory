#Example #2
combined2ColonVector <- c(1:10, 20:-5)
typeof(combinedColonVector)
combined2ColonVector
typeof(combined2ColonVector)
typeof(combinedColonVector)
typeof(combined2ColonVector)
combinedColonVector
# We can combine the colon operator with c() function
#Example #1
combinedColonVector <- c(3:9, 10)
combinedColonVector
typeof(combinedColonVector)
# We can combine the colon operator with c() function
#Example #1
combinedColonVector <- c(3:9, 10)
# We can combine the colon operator with c() function
#Example #1
combinedColonVector <- c(3:9, 10)
combinedColonVector <- c(3:9, 10)
# We can combine the colon operator with c() function
combinedColonVector <- c(3:9, 10)
combinedColonVector
typeof(combinedColonVector)
#Example #2
combined2ColonVector <- c(1:10, 20:-5)
combined2ColonVector
typeof(combined2ColonVector)
# We can combine the colon operator with c() function
# Example #1
combinedColonVector <- c(1:10)
combinedColonVector
typeof(combinedColonVector)
# We can combine the colon operator with c() function
# Example #1
combinedColonVector <- c(2:10)
combinedColonVector
typeof(combinedColonVector)
# We can combine the colon operator with c() function
# Example #1
combinedColonVector <- c(2:10,9)
combinedColonVector
typeof(combinedColonVector)
# We can combine the colon operator with c() function
# Example #1
combinedColonVector <- c(1:10)
# We can combine the colon operator with c() function
# Example #1
combinedColonVector <- c(3:9, 70)
combinedColonVector
typeof(combinedColonVector)
# result is double - because number is not in sequences
#Example #2
combined2ColonVector <- c(1:10, 20:-5)
combined2ColonVector
typeof(combined2ColonVector)
# result is double - because number is not in sequences
#Example #2
combined2ColonVector <- c(1:9, 20:-5)
combined2ColonVector
typeof(combined2ColonVector)
# result is double - because number is not in sequences
#Example #2
combined2ColonVector <- c(1:9, 7:-5)
combined2ColonVector
typeof(combined2ColonVector)
# result is double - because number is not in sequences
#Example #2
combined2ColonVector <- c(1:10, 7:-5)
combined2ColonVector
typeof(combined2ColonVector)
repVector
repVector <- rep(5, 3)
repVector
rm(repvector)
rm(repvector)
rm(repVector)
repNumberVector <- rep(5, 3)
repnumkberVector
repNumberVector <- rep(5, 3)
repnumberVector
repNumberVector <- rep(5, 3)
repNumberVector
# using rep() using strings
repStringVector <- rep("Bhuppal", 6)
repStringVector
# Using rep() with c(), we can replicate an entire vector
usingC_RepNumberVector <- rep(c(1,2,3), 5)
usingC_RepNumberVector
#Example #2
# To replicate the vector element-wise and we use the each element
repWithEachparamNumberVector <- rep(c(1,2,3), each = 5)
repWithEachparamNumberVector
#Example #3
# Combine rep() with the colon operator
repColonNumberVector <- rep(2:5, 3)
repColonNumberVector
#Example #4
#To replicate the sequence element-wise
repColonEachVector <- rep(2:5, each = 3)
repColonEachVector
repColonNumberVector
#Example #3
# Combine rep() with the colon operator
repColonNumberVector <- rep(2:5, 3)
repColonNumberVector
repColonEachVector
#Example #5
# Other functions that replicate values
#the function numeric() will get us a vector of zero's
numZeroNumberVector <- numeric(4)
numZeroNumberVector
#Example #6
#The function character() to get empty strings
emptyStringVector <- string(4)
emptyStringVector
#Example #6
#The function character() to get empty strings
emptyStringVector <- character(4)
emptyStringVector
#Example #7
falseLogicalVector <- logical(4)
falseLogicalVector
#Example #1
seqVector <- seq(from=1, to=10, by=0.5)
seqVector
#Example #2
seqWithOrderSpeVector <- seq(1, 10, 0.5)
seqWithOrderSpeVector
seqWithAnotherExpVector <- seq(0, 20, 2)
seqWithAnotherExpVector
#Example 4
seq1_10Vector <- seq(1, 10, 2)
seq1_10Vector
seq1_10Vector
#Example #5
# We can create sequence in reversed order
# using a negative step
seqReverseOrderVector <- seq(11, 1, -2)
seqReverseOrderVector
#Example #6
seqUsingLengthVector <- seq(1, 5, lengt=10)
seqUsingLengthVector
#Example #6
seqUsingLengthVector <- seq(1, 5, length=10)
seqUsingLengthVector
#Example #6
seqUsingLengthVector <- seq(1, 5, length=10)
seqUsingLengthVector
seqUsingLengthVector
seqUsingLengthVector
#Example #7
# Creating a sequence of 100 numbers from -3 to 25
# the step is (25+3)/99 = 0.282828
seqUsingPositiveVector <- seq(-3, 25, length=100)
seqUsingPositiveVector
#Example #8
# We can combine the seq() function with c() and rep()
seqWithConcatVector <- c(seq(1, 10, length=5), 30 , 40)
seqWithConcatVector
#Example #9
# Using seq() method with rep() method
seqUsingRepVector <- rep(seq(1, 3, 0.5), each = 3)
seqUsingRepVector
seqUsingRepVector
#Example #9
# Using seq() method with rep() method
seqUsingRepVector <- rep(seq(1, 3, 0.5), 3)
seqUsingRepVector
#Example #10
seqUsingRepEachVector <- rep(seq(1, 3, 0.5), each = 3)
seqUsingRepEachVector
seqUsingRepEachVector
# sample() function take population and # of values to be generated
# Generate 12 random numbers from 1 to 100
#Example #1
sampleExample <- sample(100, 12)
sampleExample
sampleExample
sampleExample
# sample() function take population and # of values to be generated
# Generate 12 random numbers from 1 to 100
#Example #1
sampleExample1 <- sample(100, 12)
sampleExample1
sampleExample2 <- sample(sampleRange, 10)
sampleExample2
sampleExample2 <- sample(sampleRange, 10)
#Example #2
# The population between 100 and 300
sampleRange <- 100:300
sampleExample2 <- sample(sampleRange, 10)
sampleExample2
sampleUsingRepalce <- sample(30, 15, replace = TRUE)
sampleUsingRepalce
#Example #4
# If the sample is greater than the population
# the replace option must be set to TRUE
sampleExample4 <- sample(10, 50, replace = TRUE)
sampleExample4
#Example #5
# If we don't allow the replacement, we get an error message
sampleExample5WithErro <- sample(10, 50, replace = TRUE)
#Example #5
# If we don't allow the replacement, we get an error message
sampleExample5WithErro <- sample(10, 50, replace = FALSE)
#Example #5
# If we don't allow the replacement, we get an error message
sampleExample5WithError <- sample(10, 50, replace = FALSE)
sampleExample5WithError
rnorm <- rnorm(10,5,.5)
rnorm
rnorm1 <- rnorm(10)
rnorm1
rnorm1 <- rnorm(5)
rnorm1
?rnorm()
hist(rnorm(2))
hist(rnorm(30))
hist(rnorm(10000))
hist(rnorm(10000), col='gray')
hist(rnorm(10000), col='blue')
(4+3+1+6+1+)
(4+3+1+6+1+7)
(4+3+1+6+1+7)/6
?mean
x <- c(0:10, 50)
x
xm <- mean(x)
xm
(1+2+3+4+5+6+7+8+9+10+50)/11
(1+2+3+4+5+6+7+8+9+10+50)
(1+2+3+4+5+6+7+8+9+10+50)/11
x <- c(1:10)
x
xm <- mean(x)
xm
(1+2+3+4+5+6+7+8+9+10)
(1+2+3+4+5+6+7+8+9+10)/10
(1+2+3+4+5+6+7+8+9+10+50)
(1+2+3+4+5+6+7+8+9+10+50)/11
x <- c(1:10,50)
x
xm <- mean(x)
xm
mean(c(-10,0,10,20,30))
rnormExample <- rnorm(100, 10, 5)
rnormExample
rnormExample1 <- rnorm(100)
rnormExample1
rnormExample1
# runif() function - To generate a vector of uniform random numbers
# To specify the number of trails and the range (lower and upper limit)
runifVector <- runif(100, 1 ,5)
runifVector
?runif
# runif() function - To generate a vector of uniform random numbers
# To specify the number of trails and the range (lower and upper limit)
runifVector <- runif(5, 1 ,5)
runifVector
set.seed(100)
runif(100)
set.seed(100)
runif(100)
#Example #8
# Helps to set the decimal points format in the result
options(digits=2)
runif(100)
#Example #8
# Helps to set the decimal points format in the result
options(digits=2)
#Example #8
# Helps to set the decimal points format in the result
options(digits=1)
runif(100)
#Example #9
letters
LETTERS
#Example #10
# How to generate 10 random numbers
sampleLetters <- LETTERS
set.seed(100)
set.seed(100)
randomNumber <- round(runif(10), 1, 26)
LetterResult <- sampleLetters[randomNumber]
randomNumber <- round(runif(10), 1, 26)
randomNumber <- round(runif(10), 1, 26))
LetterResult <- sampleLetters[randomNumber]
randomNumber <- round(runif(10), 1, 26))
randomNumber <- round(runif(10, 1, 26))
LetterResult <- sampleLetters[randomNumber]
LetterResult
# rexp() function To generate a vector of exponential random numbers
rexpVector <- rexp(100, 1/ 50)
rexpVector
emptyVector <- c()
emptyVector
typeof(emptyVector)
length(emptyVector)
#Example #2
emptyNullVector <- NULL
emptyNullVector
typeof(emptyNullVector)
typeof(emptyNullVector)
typeof(emptyVector)
#Example #3
# Using an empty vector() function
logicalVector <- vector()
logicalVector
typeof(logicalVector)
#Example #4
# Adding values to the existing vector
emptyAddValuesVector <- c(emptyVector, 1, 2)
emptyAddValuesVector
emptyAddValuesVector
typeof(emptyAddValuesVector)
emptyAddvalues1 <- c(emptyNullVector, 1 ,2 )
emptyAddvalues1
typeof(emptyAddvalues1)
emptyAddValuesVector2 <- c(logicalVector, 1, 2)
emptyAddValuesVector2
typeof(emptyAddValuesVector2)
# Creating a numeric vector
numericVector <- c(10, 20, 30, 40, 50 , 60 , 70, 80 , 90 , 100)
# Access one component using indices
numericVector[4]
# Access one component using indices
# Accessing 4th
numericVector[1]
# Access one component using indices
# Accessing 4th
numericVector[4]
# To access the serval component from the vector
# We can use c() function
usingCVectorIndices <- numberVector[c(1,3,5)]
usingCVectorIndices
# To access components in order
numberVector[2:5]
numberVector[5:2]
# Combine the methods above
numberVector[c(1:3), 5]
# Combine the methods above
numberVector[c(1:3, 5)]
# Access the last component (when we don;t knwo the length)
numericVector[length(numericVector)]
# Coping a part of indices from the existing vector and creating a new onw
newVector <- x[3:5]
newVector
numberVector[-2]
# Remove several components
numberVector[c(-1, -3, -6)]
numberVector
numberVector[-2:-4]
# Creating a numeric vector
numericVector <- c(10, 20, 30, 40, 50 , 60 , 70, 80 , 90 , 100)
# Access one component using indices
# Accessing 4th
numericVector[4]
# To access the serval component from the vector
# We can use c() function
usingCVectorIndices <- numberVector[c(1,3,5)]
numberVector[n]
# To access the serval component from the vector
# We can use c() function
n <- c(1,3,5)
numberVector[n]
# To access the serval component from the vector
# We can use c() function
numberVector[c(1,3,5)]
# Creating a numeric vector
numericVector <- c(10, 20, 30, 40, 50 , 60 , 70, 80 , 90 , 100)
numericVector
# Access one component using indices
# Accessing 4th
numericVector[4]
# To access the serval component from the vector
# We can use c() function
numberVector[c(1,3,5)]
# To access the serval component from the vector
# We can use c() function
numbericVector[c(1,3,5)]
# To access the serval component from the vector
# We can use c() function
numericVector[c(1,3,5)]
# To access components in order
numberVector[2:5]
numberVector[5:2]
# Combine the methods above
numberVector[c(1:3, 5)]
# Access the last component (when we don;t knwo the length)
numericVector[length(numericVector)]
numberVector[length(numberVector)]
# Combine the methods above
numberVector[c(1:3, 5)]
# To access components in order
numericVector[2:5]
numericVector[5:2]
# Combine the methods above
numericVector[c(1:3, 5)]
# Access the last component (when we don;t knwo the length)
numericVector[length(numericVector)]
# Coping a part of indices from the existing vector and creating a new onw
n <- 3:5
numericVector[n]
# Remove one component
# Following command will remove 2nd component
numberVector[-2]
numericVector
# Remove one component
# Following command will remove 2nd component
numericVector[-2]
# Remove several components
numericVector[c(-1, -3, -6)]
numericVector
numericVector[-4:-2]
# Remove components in order
numericVector[-2:-4]
# Combine the methods above
numericVector[c(-1:-5, -9)]
# Remove the last component
numericVector[-length(numericVector)]
# We can;t mix negative and positive indices
numericVector[c(3, -7)]
# Only zeros can be mixed with negative indices
numericVector[c(0,-7)]
# This has the same effect as
numericVector[-7]
numericVector <- c(7, 8, 9, 10)
numericVector
numericVector[5] <- 11
numericVector
numbericVector
numericVector
numericVector
# Creating a numeric vector
numericVector <- c(10, 20, 30, 40, 50 , 60 , 70, 80 , 90 , 100)
# We can add components to an existing vector
# (or edit components) using Indices
numericVector <- numericVector[c(7, 8, 9, 10)]
numericVector
# We can add components to an existing vector
# (or edit components) using Indices
numericVector <-c(7, 8, 9, 10)
numericVector
numericVector[5] <- 11
numericVector
numericVector <- 100
numericVector
# Creating a numeric vector
numericVector <- c(10, 20, 30, 40, 50 , 60 , 70, 80 , 90 , 100)
# We can add components to an existing vector
# (or edit components) using Indices
numericVector <-c(7, 8, 9, 10)
numericVector
numericVector[5] <- 11
numericVector
numericVector[2] <- 100
numericVector
# We can't do this if the vector was not pre-defined
p[1] <- 3
# we must define the vector first
p <- c()
# Then we can add components
p[1] <- 3
p[2] <- 7
p
# To insert a component into an existing vector
# We must break the vector
x <- c(9, 10, 11, 12)
# We want to insert 50 between 11 and 12
x <- c(x[1:3], 50, x[4])
x
usingLogicalVector <- c(1, 2, 3, 4)
# We need to access the second and the third components
# We create a logical vector of the same length
sampleLogicalVector <- c(FALSE, TRUE, TRUE, FALSE)
usingLogicalVector[sampleLogicalVector]
# We can do this directly as well
usingLogicalVector[c(FALSE, TRUE, TRUE, FALSE)]
salary <- c(4000, 2700, 3200)
# To add the employees names, we use the names() function
names(salary) <- c("Rhonda", "Bhuppal", "Kumar")
salary
# If a vector has names, we can access the components using them
salary["Rhonda"]
salary
names
names
names(salary)
salary
salary
names(salary)
salary <- c(4000, 2700, 3200)
# To add the employees names, we use the names() function
names(salary) <- c("Rhonda", "Bhuppal", "Kumar")
salary
# If a vector has names, we can access the components using them
salary["Rhonda"]
# To remove names we assign the NULL value to the names() function
names(salary) <- null
# To remove names we assign the NULL value to the names() function
names(salary) <- null
salary <- c(4000, 2700, 3200)
# To add the employees names, we use the names() function
names(salary) <- c("Rhonda", "Bhuppal", "Kumar")
salary
# If a vector has names, we can access the components using them
salary["Rhonda"]
# To remove names we assign the NULL value to the names() function
names(salary) <- NULL
names(salary)
salary
